observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
print((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL)
exp <- total*(1 - pnorm(interval_range[interval, 2], avg, std))
cal_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
exp <- total*pnorm(interval_range[1, 2], avg, std)
expected <- c(as.numeric(exp))
expected <- c()
for(i in 2:(interval-1)) {
exp <- total*(pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
exp <- total*(1 - pnorm(interval_range[interval, 2], avg, std))
expected <- c(expected, as.numeric((exp)))
return(expected)
}
goodness_norm <- function(field, interval) {
interval_range <- generate_interval(field, interval)
print(interval_range)
observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
print((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL)
cal_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
expected <- c()
for(i in 1:interval) {
exp <- total*(pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
return(expected)
}
goodness_norm <- function(field, interval) {
interval_range <- generate_interval(field, interval)
print(interval_range)
observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
print((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL)
102-503
generate_interval <- function(field, interval) {
field_range_data <- range(field)
field_range <- field_range_data[2] - field_range_data[1]
avg_field_range <- 40
min_range <- -Inf
max_range <- 100
min_interval <- c(-Inf)
max_interval <- c(max_range)
for (i in 3:interval) {
min_range <- max_range
max_range <- max_range + avg_field_range
min_interval <- c(min_interval, min_range)
max_interval <- c(max_interval, max_range)
}
min_interval <- c(min_interval, max_range)
max_interval <- c(max_interval, Inf)
return(cbind(min_interval, max_interval))
}
count_interval <- function(field, interval_range, interval) {
count <- c()
for(i in 1:interval) {
count <- c(count, sum(field >= interval_range[i,1] & field < interval_range[i,2]))
}
return(count)
}
cal_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
expected <- c()
for(i in 1:interval) {
exp <- total*(pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
return(expected)
}
goodness_norm <- function(field, interval) {
interval_range <- generate_interval(field, interval)
print(interval_range)
observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
print((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL)
df <- read.csv('concrete.csv')
INTERVAL <- 10
generate_interval <- function(field, interval) {
field_range_data <- range(field)
field_range <- field_range_data[2] - field_range_data[1]
avg_field_range <- field_range/interval
min_range <- -Inf
max_range <- field_range_data[1]
min_interval <- c(-Inf)
max_interval <- c(max_range)
for (i in 3:interval) {
min_range <- max_range
max_range <- max_range + avg_field_range
min_interval <- c(min_interval, min_range)
max_interval <- c(max_interval, max_range)
}
min_interval <- c(min_interval, max_range)
max_interval <- c(max_interval, Inf)
return(cbind(min_interval, max_interval))
}
count_interval <- function(field, interval_range, interval) {
count <- c()
for(i in 1:interval) {
count <- c(count, sum(field >= interval_range[i,1] & field < interval_range[i,2]))
}
return(count)
}
cal_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
expected <- c()
for(i in 1:interval) {
exp <- total*(pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
return(expected)
}
goodness_norm <- function(field, interval) {
interval_range <- generate_interval(field, interval)
print(interval_range)
observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
print((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL)
goodness_norm <- function(field, interval) {
interval_range <- generate_interval(field, interval)
print(interval_range)
observed <- count_interval(field, interval_range, interval)
expected <- cal_expected_number(field, interval_range, interval)
print(observed)
print(expected)
testStat <- sum((observed-expected)^2/expected)
print(testStat)
}
goodness_norm(df$cement, INTERVAL)
df <- read.csv('concrete.csv')
INTERVAL <- 10
generate_interval <- function(field, interval) {
field_range_data <- range(field)
field_range <- field_range_data[2] - field_range_data[1]
avg_field_range <- field_range/interval
min_range <- -Inf
max_range <- field_range_data[1]
min_interval <- c(-Inf)
max_interval <- c(max_range)
for (i in 3:interval) {
min_range <- max_range
max_range <- max_range + avg_field_range
min_interval <- c(min_interval, min_range)
max_interval <- c(max_interval, max_range)
}
min_interval <- c(min_interval, max_range)
max_interval <- c(max_interval, Inf)
return(cbind(min_interval, max_interval))
}
count_interval <- function(field, interval_range, interval) {
count <- c()
for(i in 1:interval) {
count <- c(count, sum(field >= interval_range[i,1] & field < interval_range[i,2]))
}
return(count)
}
norm_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
expected <- c()
for(i in 1:interval) {
exp <- total*(pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
return(expected)
}
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL, sig)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
print(testStat)
}
goodness_norm(df$cement, INTERVAL, sig)
goodness_norm(df$slag, INTERVAL, sig)
goodness_norm(df$coarseagg, INTERVAL, sig)
goodness_norm(df[1], INTERVAL, sig)
goodness_norm(df[1:], INTERVAL, sig)
goodness_norm(df[1,], INTERVAL, sig)
goodness_norm(df$ash, INTERVAL, sig)
goodness_norm(df$water, INTERVAL, sig)
goodness_norm(df$superplastic, INTERVAL, sig)
goodness_norm(df$fineagg, INTERVAL, sig)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
critical <- 1-pchisq(testStat, length(field)-1)
print(testStat)
print(critical)
}
goodness_norm(df$fineagg, INTERVAL, 0.01)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
critical <- pchisq(testStat, length(field)-1)
print(testStat)
print(critical)
}
goodness_norm(df$fineagg, INTERVAL, 0.01)
chisq.test(df$fineagg)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
critical <- pchisq(testStat, length(field)-1)
print(testStat)
print(critical)
print(chisq.test((observed-expected)^2/expected))
}
goodness_norm(df$fineagg, INTERVAL, 0.01)
chisq.test(field)
chisq.test(df$cement)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- 1-pchisq(testStat, length(field)-1)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- 1-pchisq(testStat, length(field)-1)
return(pvalue >= 0.05)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- 1-pchisq(testStat, length(field)-1)
print(pvalue)
return(pvalue >= 0.05)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- pchisq(testStat, length(field)-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- pchisq(testStat, df=length(field)-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
print(rchisq(sig, df=length(field)-1))
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
print(rchisq(sig, df=length(field)-1))
return(pvalue >= sig)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
print(rchisq(sig, df=length(field)-1))
# return(pvalue >= sig)
}
goodness_norm(df$fineagg, INTERVAL, 0.05)
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- pchisq(testStat, length(field)-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
# pvalue <- pchisq(testStat, length(field)-1)
# print(pvalue)
# return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
norm_expected_number <- function(field, interval_range, interval) {
avg <- mean(field)
std <- sd(field)
total <- length(field)
expected <- c()
for(i in 1:interval) {
exp <- (pnorm(interval_range[i, 2], avg, std) - pnorm(interval_range[i, 1], avg, std))
expected <- c(expected, as.numeric(exp))
}
return(expected)
}
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test(observed, expected)
# pvalue <- pchisq(testStat, length(field)-1)
# print(pvalue)
# return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
qchisq(0.01, 1029)
qchisq(0.01, 1028)
qchisq(0.99, 1028)
qchisq(0.01, 1028)
qchisq(0.99, 1028)
qchisq(1, 1028)
qchisq(0.05, 1028)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- 1-pchisq(testStat, interval-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- 1-pchisq(testStat, interval-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- 1.000-pchisq(testStat, interval-1)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- pchisq(testStat, interval-1, lower.tail = TRUE)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
pvalue <- pchisq(testStat, interval-1, lower.tail = FALSE)
return(pvalue >= sig)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- pchisq(testStat, interval-1, lower.tail = FALSE)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- pchisq(testStat, interval-1, lower.tail = FALSE)
print(pvalue)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
pvalue <- pchisq(testStat, interval-1, lower.tail = FALSE)
print(pchisq(testStat, interval-1, lower.tail = FALSE))
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- chisq.test(testStat, interval-1, lower.tail = FALSE)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- chisq.test(testStat, interval-1)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- chisq.test((observed-expected)^2/expected, interval-1)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- chisq.test((observed-expected)^2/expected)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
pvalue <- chisq.test((observed-expected)^2/expected)
return(pvalue >= sig)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- sum((observed-expected)^2/expected)
chisq.test((observed-expected)^2/expected)
}
goodness_norm(df$cement, INTERVAL, 0.05)
goodness_norm(df$water, INTERVAL, 0.05)
goodness_norm <- function(field, interval, sig) {
interval_range <- generate_interval(field, interval)
observed <- count_interval(field, interval_range, interval)
expected <- norm_expected_number(field, interval_range, interval)
testStat <- (observed-expected)^2/expected
chisq.test(testStat)
}
goodness_norm(df$water, INTERVAL, 0.05)
